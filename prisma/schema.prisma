// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  // Senha hash para login por credenciais (opcional para usu√°rios OAuth / magic link)
  password      String?
  level         UserLevel @default(INICIANTE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  progress UserProgress[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// LMS models
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  modules Module[]

  @@map("courses")
}

model Module {
  id          String     @id @default(cuid())
  courseId    String
  title       String
  description String?
  order       Int        @default(0)
  difficulty  Difficulty @default(INICIANTE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id            String     @id @default(cuid())
  moduleId      String
  title         String
  description   String?
  difficulty    Difficulty @default(INICIANTE)
  timeSignature String     @default("4/4") // JSON string like "[4,4]"
  minBpm        Int        @default(60)
  targetBpm     Int        @default(120)
  pattern       String // JSON string with RhythmEvent[]
  order         Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  module   Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress UserProgress[]

  @@map("lessons")
}

model UserProgress {
  id              String    @id @default(cuid())
  userId          String
  lessonId        String
  completed       Boolean   @default(false)
  bestScore       Float? // Score from 0 to 100
  lastPracticedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_progress")
}

// Enums
enum UserLevel {
  INICIANTE
  INTERMEDIARIO
  AVANCADO
}

enum Difficulty {
  INICIANTE
  INTERMEDIARIO
  AVANCADO
}
